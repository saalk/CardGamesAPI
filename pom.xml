<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <!-- Maven version of the xml document currently only 4.0.0 is valid -->
    <properties>
        <vendor.loc>src/main/webapp/vendor</vendor.loc>
        <endorsed.dir>${project.build.directory}/endorsed</endorsed.dir>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>

        <!-- local properties for deploy on local tomcat -->
        <tomcat.port>8383</tomcat.port>
        <tomcat-manager.port>7070</tomcat-manager.port>
        <tomcat.path>/</tomcat.path>
        <tomcat.host>localhost</tomcat.host>

        <!-- VERSION 9 -->
        <tomcat-servlet-api.version>9.0.7</tomcat-servlet-api.version>

        <!-- VERSION 8 -->
        <java.version>1.8</java.version>

        <!-- VERSION 7 -->
        <tomcat-dbcp.version>7.0.55</tomcat-dbcp.version>

        <!-- VERSION 5 -->
        <mysql.connector.version>5.1.34</mysql.connector.version>
        <hibernate.version>5.2.2.Final</hibernate.version>
        <hibernate-validator.version>5.2.4.Final</hibernate-validator.version>

        <!-- VERSION 4 -->
        <!-- some hibernate versions are not compatible with some spring versions
             hibernate 3 requires a small change in spring bean configuration -->
        <springframework.version>4.3.3.RELEASE</springframework.version>
        <junit.version>4.11</junit.version>

        <!-- VERSION 3 -->
        <maven.compiler.plugin>3.5.1</maven.compiler.plugin>
        <maven.war.plugin>3.0.0</maven.war.plugin>
        <maven.clean.plugin>3.0.0</maven.clean.plugin>
        <javassist.version>3.20.0-GA</javassist.version>

        <!-- VERSION 2 -->
        <tomcat7-maven-plugin>2.2</tomcat7-maven-plugin>
        <maven.dependency.plugin>2.10</maven.dependency.plugin>
        <jackson.version>2.7.5</jackson.version>
        <jersey-media-json-jackson.version>2.25</jersey-media-json-jackson.version>
        <jasmine.maven.plugin>2.2</jasmine.maven.plugin>
        <!--The plugin com.github.searls:jasmine-maven-plugin:2.1 requires Maven version 3.1.0-->
        <stateless4j.version>2.5.0</stateless4j.version>
        <springfox-swagger.version>2.6.1</springfox-swagger.version>


        <!-- VERSION 1 -->
        <!-- 1.3.2 since 1.5.0 is not working-->
        <exec.maven.plugin>1.3.2</exec.maven.plugin>
        <spring-boot.version>1.4.0.RELEASE</spring-boot.version>
        <spring-data-jpa.version>1.10.4.RELEASE</spring-data-jpa.version>
        <!--
        <aspose-cells.version>9.0.0</aspose-cells.version> -->

        <mockito.version>1.9.5</mockito.version>
        <log4j>1.2.17</log4j>
        <slf4j-version>1.7.5</slf4j-version>
        <logback.version>1.1.7</logback.version>
        <aspectj-version>1.7.4</aspectj-version>
        <lombok.version>1.16.10</lombok.version>
        <cucumber.version>1.2.5</cucumber.version>

        <!-- VERSION 0 -->
        <spring-hateoas.version>0.20.0.RELEASE</spring-hateoas.version>

        <!-- modelmapper.org - jhalterman - Simple, intelligent, object mapping -->
        <!-- - maps between internal Spring entities and external Data Transfer Objects -->
        <modelmapper.version>0.7.5</modelmapper.version>

    </properties>

    <!-- Gav: reverse domain name. -->
    <modelVersion>4.0.0</modelVersion>
    <!-- gAv: This is the name given to the packaged build -->
    <groupId>nl.knikit.cardgames</groupId>
    <!-- usually <name>${project.artifactId}</name> -->
    <artifactId>card-games-webapp</artifactId>
    <!-- Default value is jar but may be war or ear -->
    <name>CardGames Webapp</name>
    <!-- gaV: SNAPSHOT means a project under development -->
    <packaging>war</packaging>

    <version>0.0.1-SNAPSHOT</version>

    <!-- no spring boot
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.4.0.RELEASE</version>
    </parent>
    -->
    <build>
        <!-- Maven is a plugin execution framework -->
        <plugins>

            <plugin>
                <!-- PLUGIN maven-compiler-plugin = called implicitly by maven this is for args spec -->
                <!-- goals: compile and test-compile -->
                <!-- ========================================================================== -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.3</version>
                <executions>
                    <execution>
                        <id>default-compile</id>
                        <phase>none</phase>
                    </execution>
                    <execution>
                        <id>Normal compilation</id>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                        <configuration>
                            <source>${java.version}</source>
                            <target>${java.version}</target>
                            <compilerArgument>
                                -XDignore.symbol.file
                            </compilerArgument>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>

            <!-- PLUGIN tomcat7-maven-plugin = run an embedded web container like tomcat -->
            <!-- goals: undeploy and deploy -->
            <!-- start embedded tomcat after build: mvn tomcat7:run and browse to  http://localhost:8383/ -->
            <!-- ========================================================================== -->
            <!-- 1a: the element below <server>tomcat7-local</server> refers to -->
            <!-- 1b: the <servers> section in ~/.m2/settings.xml where the credentials are stored -->
            <!-- 1c: and that refers to username and password in <Tomcat-Home>/conf/tomcat-users.xml -->
            <plugin>
                <groupId>org.apache.tomcat.maven</groupId>
                <artifactId>tomcat7-maven-plugin</artifactId>
                <version>${tomcat7-maven-plugin}</version>
                <configuration>
                    <!-- manager/text for remote deploy for manually do manager /html -->
                    <!-- be sure to have c added as a role -->
                    <url>http://${tomcat.host}:${tomcat.port}/manager/text</url>
                    <server>tomcat7-local</server>
                    <path>${tomcat.path}</path>
                    <warDirectory>target/${project.artifactId}##${project.version}</warDirectory>
                </configuration>
                <executions>
                    <execution>
                        <id>clean-undeploy</id>
                        <phase>clean</phase>
                        <goals>
                            <goal>undeploy</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>local-tomcat</id>
                        <phase>package</phase>
                        <goals>
                            <!-- you can use redeploy as well -->
                            <goal>deploy</goal>
                        </goals>
                    </execution>
                </executions>

            </plugin>

            <!-- PLUGIN for collecting classes and resources for a web app and package them into a war -->
            <!-- 2: ... -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>${maven.war.plugin}</version>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                    <archive>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>

                        </manifest>
                    </archive>
                </configuration>
            </plugin>

            <!-- PLUGIN for utilities to work with dependencies like copy, pack, etc -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>${maven.dependency.plugin}</version>
                <executions>
                    <execution>
                        <phase>validate</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${endorsed.dir}</outputDirectory>
                            <silent>true</silent>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>javax</groupId>
                                    <artifactId>javaee-endorsed-api</artifactId>
                                    <version>7.0</version>
                                    <type>jar</type>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- PLUGIN plugin for scala, used by gatling -->
            <!-- yuicompressor is to minify + obfuscate + check js and css files -->
            <plugin>
                <groupId>net.alchim31.maven</groupId>
                <artifactId>yuicompressor-maven-plugin</artifactId>
                <version>1.5.1</version>
                <executions>
                    <execution>
                        <id>compress-js</id>
                        <phase>process-resources</phase>
                        <goals>
                            <!--<goal>jslint</goal>-->
                            <goal>compress</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <failOnWarning>true</failOnWarning>
                    <!--<outputDirectory>src/main/webapp/js</outputDirectory>-->
                    <outputDirectory>target/${project.artifactId}/js</outputDirectory>
                    <nosuffix>true</nosuffix>
                    <excludes>
                        <exclude>**/js/**/*js</exclude>
                        <exclude>vendor/**</exclude>
                        <exclude>**/*min.css</exclude>
                        <exclude>**/*min.js</exclude>
                    </excludes>
                </configuration>
            </plugin>

            <!-- PLUGIN to execute Jasmine Specs (unittest javascript) and Selenuim (integrate browser testing) -->
            <plugin>
                <groupId>com.github.searls</groupId>
                <artifactId>jasmine-maven-plugin</artifactId>
                <version>${jasmine.maven.plugin}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>test</goal>
                            <goal>bdd</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <webDriverClassName>org.openqa.selenium.phantomjs.PhantomJSDriver
                    </webDriverClassName>
                    <preloadSources>
                        <source>${vendor.loc}/jquery/dist/jquery.js</source>
                        <source>${vendor.loc}/angular/angular.min.js</source>
                        <source>${vendor.loc}/angular-route/angular-route.min.js</source>
                        <source>${vendor.loc}/angular-mocks/angular-mocks.js</source>
                    </preloadSources>
                    <jsSrcDir>src/main/webapp/javascript</jsSrcDir>
                    <jsTestSrcDir>src/test/javascript/unit</jsTestSrcDir>
                    <specIncludes>
                        <include>*Spec.js</include>
                    </specIncludes>
                </configuration>
            </plugin>

            <!-- PLUGIN 1.3.2 to execute Java in the same VM as maven-->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>${exec.maven.plugin}</version>
                <executions>
                    <execution>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <executable>bower</executable>
                    <arguments>
                        <argument>install</argument>
                    </arguments>
                    <workingDirectory>${basedir}</workingDirectory>
                </configuration>
            </plugin>

            <!-- PLUGIN 2.5 to remove files generated at build-time in a project's
            directory. -->
            <plugin>
                <artifactId>maven-clean-plugin</artifactId>
                <version>${maven.clean.plugin}</version>
                <configuration>
                    <filesets>
                        <fileset>
                            <directory>src/main/webapp/vendor</directory>
                        </fileset>
                        <fileset>
                            <directory>node_modules</directory>
                        </fileset>
                    </filesets>
                </configuration>
            </plugin>

            <!-- PLUGIN to integrate PlantUML -->
            <!--<plugin>
                <groupId>com.github.jeluard</groupId>
                <artifactId>plantuml-maven-plugin</artifactId>
                <version>1.4</version>
                <configuration>
                    <outputInSourceDirectory>false</outputInSourceDirectory>
                    <outputDirectory>${basedir}/target/site/apidocs</outputDirectory>
                    <sourceFiles>
                        <directory>${basedir}/src/main/java/</directory>
                        <includes>
                            <include>**/*.java</include>
                        </includes>
                    </sourceFiles>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>net.sourceforge.plantuml</groupId>
                        <artifactId>plantuml</artifactId>
                        <version>8047</version>
                    </dependency>
                </dependencies>

            </plugin>-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                        <configuration>
                            <doclet>nl.talsmasoftware.umldoclet.UMLDoclet</doclet>
                            <docletArtifact>
                                <groupId>nl.talsmasoftware</groupId>
                                <artifactId>umldoclet</artifactId>
                                <version>1.0.16</version>
                            </docletArtifact>
                            <additionalOptions>
                                <additionalOption></additionalOption>
                            </additionalOptions>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- make a database while doing mvn install -> just fill user and psw -->
            <plugin>
                <groupId>de.juplo</groupId>
                <artifactId>hibernate-maven-plugin</artifactId>
                <version>2.0.0</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>drop</goal>
                            <goal>create</goal>
                        </goals>
                    </execution>
                </executions>
                <!-- local -->
                <configuration>
                    <driver>org.mariadb.jdbc.Driver</driver>
                    <dialect>org.hibernate.dialect.MySQL5Dialect</dialect>
                    <url><![CDATA[jdbc:mariadb://192.168.2.100:3306/knikit]]></url>
                    <username>root</username>
                    <password>klaas</password>
                </configuration>
                <!-- remote MhySQL versie 5.6.42 -->
<!--                <configuration>
                    <driver>com.mysql.jdbc.Driver</driver>
                    <dialect>org.hibernate.dialect.MySQL5Dialect</dialect>
                    <url><![CDATA[jdbc:mysql://rdbms.strato.de/DB3985394]]></url>
                    <username>U3985394</username>
                    <password>deventer01!</password>
                </configuration>-->
            </plugin>

            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>integration-test</phase>
                        <configuration>
                            <tasks>
                                <copy file="D:\Work\Projects\workspace\CardGamesAPI\target\card-games-webapp##0.0.1-SNAPSHOT.war"
                                      tofile="D:\Work\Projects\workspace\CardGamesAPI\target\ROOT.war"
                                      overwrite="true"/>
                            </tasks>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>

        <finalName>${project.artifactId}##${project.version}</finalName>

        <resources>
            <resource>
                <directory>src/main/webapp/javascript</directory>
                <filtering>true</filtering>
            </resource>
            <resource>
                <directory>src/main/resources/external</directory>
                <includes>
                    <include>*.txt</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/resources/sql</directory>
                <includes>
                    <include>*.sql</include>
                </includes>
            </resource>
        </resources>
    </build>

    <!-- Dependencies are libraries that either must be included in the -->
    <!-- jar/war file or are expected to be found in the container such as -->
    <!-- GlassFish -->
    <dependencies>

        <!-- extra project specific dependencies -->

        <dependency>
            <groupId>org.modelmapper</groupId>
            <artifactId>modelmapper</artifactId>
            <version>${modelmapper.version}</version>
        </dependency>

        <dependency>
            <groupId>net.sourceforge.plantuml</groupId>
            <artifactId>plantuml</artifactId>
            <version>8047</version>
        </dependency>

        <dependency>
            <groupId>com.github.oxo42</groupId>
            <artifactId>stateless4j</artifactId>
            <version>${stateless4j.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-jdk14</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- no spring boot
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
            <scope>provided</scope>
        </dependency>
        -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${springframework.version}</version>
        </dependency>

        <!-- needed when other dependencies need a different version of spring-web
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>${springframework.version}</version>
        </dependency>
        -->
        <dependency> <!-- Define this if you use Spring Expression APIs -->
            <groupId>org.springframework</groupId>
            <artifactId>spring-expression</artifactId>
            <version>${springframework.version}</version>
        </dependency>
        <dependency> <!-- implementation of Spring MVC, includes spring-web -->
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${springframework.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${springframework.version}</version>
            <exclusions>
                <!-- Exclude Commons Logging in favor of SLF4j -->
                <exclusion>
                    <groupId>commons-logging</groupId>
                    <artifactId>commons-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
            <version>${springframework.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
            <version>${springframework.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId>
            <version>${springframework.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${springframework.version}</version>
            <scope>test</scope>
        </dependency>


        <dependency> <!-- Object-to-Relation-Mapping (ORM) integration with Hibernate -->
            <groupId>org.springframework</groupId>
            <artifactId>spring-orm</artifactId>
            <version>${springframework.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
            <version>${springframework.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-jpa</artifactId>
            <version>${spring-data-jpa.version}</version>
        </dependency>


        <!-- AspectJ -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
            <version>${aspectj-version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-oxm</artifactId>
            <version>${springframework.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.hateoas</groupId>
            <artifactId>spring-hateoas</artifactId>
            <version>${spring-hateoas.version}</version>
        </dependency>

        <!-- add servlet since springs dispatcher servlet depends on it
         set its scope as provided inside the pom.xml and maven will not place it
         in the WEB-INF/lib of your project
         its provided since tomcat has servlet a implementation
         -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.1.0</version>
            <scope>provided</scope>
        </dependency>
        <!-- scope means that it is not packaged to war
        <dependency>
            <groupId>javax.servlet.jsp</groupId>
            <artifactId>jsp-api</artifactId>
            <version>2.1</version>
            <scope>provided</scope>
        </dependency> -->
        <dependency> <!-- This dependency is required to use the JSP standard tag libray.  -->
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.2.2</version>
        </dependency>

        <!-- Hibernate ORM framework dependencies -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>${hibernate.version}</version>
        </dependency>
        <!-- to enable Hibernate to use its proxy model, we need javassist -->
        <!-- javassist makes Java bytecode manipulation simple. -->
        <dependency>
            <groupId>org.javassist</groupId>
            <artifactId>javassist</artifactId>
            <version>${javassist.version}</version>
        </dependency>
        <!-- Deprecated Hibernate entity manager is included in hibernate-core
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-entitymanager</artifactId>
            <version>${hibernate.version}</version>
        </dependency> -->

        <!-- Hibernate Validator
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>${hibernate-validator.version}</version>
        </dependency>
        <dependency>
            <groupId>org.glassfish.web</groupId>
            <artifactId>javax.el</artifactId>
            <version>2.2.4</version>
        </dependency> -->
        <dependency>
            <groupId>javax.el</groupId>
            <artifactId>javax.el-api</artifactId>
            <version>2.2.4</version>
            <scope>provided</scope>
        </dependency>

        <!-- database MariaDB + Connector/J jdbc driver for MySQL -->
        <dependency>
            <groupId>org.mariadb.jdbc</groupId>
            <artifactId>mariadb-java-client</artifactId>
            <version>1.5.2</version>
        </dependency>

        <!-- MySQL Connector Java dependency (JDBC driver for MySQL) -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>${mysql.connector.version}</version>
            <scope>runtime</scope>
        </dependency>

        <!-- a proper connection pool instead of the dev-only Spring implementation – the DriverManagerDataSource -->
        <!-- After a connection is created, it is placed in the pool and it is used again so that a new connection does
        not have to be established. -->
        <dependency>
            <groupId>org.apache.tomcat</groupId>
            <artifactId>tomcat-dbcp</artifactId>
            <version>${tomcat-dbcp.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.tomcat</groupId>
            <artifactId>tomcat-servlet-api</artifactId>
            <version>${tomcat-servlet-api.version}</version>
            <scope>provided</scope>
        </dependency>
        <!-- Cucumber http://cukes.info/install-cucumber-jvm.html
        running automated tests -->
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-java</artifactId>
            <version>3.0.0-beta3</version>
        </dependency>
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>htmlunit-driver</artifactId>
            <version>2.23</version>
        </dependency>
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-server</artifactId>
            <version>3.0.0-beta3</version>
        </dependency>

        <dependency>
            <groupId>info.cukes</groupId>
            <artifactId>cucumber-java</artifactId>
            <version>${cucumber.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>info.cukes</groupId>
            <artifactId>cucumber-junit</artifactId>
            <version>${cucumber.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>info.cukes</groupId>
            <artifactId>cucumber-spring</artifactId>
            <version>${cucumber.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>info.cukes</groupId>
            <artifactId>cucumber-core</artifactId>
            <version>${cucumber.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- JUnit is a regression testing framework written by Erich Gamma and Kent Beck. -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!-- Mock objects library for java. -->
            <groupId>org.mockito</groupId>
            <artifactId>mockito-all</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- not compatible with spring boot and tomcat 8 -->
        <!-- These dependencies are required to run the project on the server -->
        <!-- Java EE 7.0 Web profile dependency -->
        <dependency>
            <!-- Java(TM) EE 7 Specification APIs -->
            <groupId>javax</groupId>
            <artifactId>javaee-api</artifactId>
            <version>7.0</version>
            <scope>provided</scope>
        </dependency>

        <dependency> <!-- important -->
            <!-- Support for using JAXB annotations as an alternative to "native" Jackson annotations, for configuring data binding. -->
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson.version}</version>
        </dependency>

        <dependency>
            <!-- Jersey JSON Jackson (2.x) provides POJOs to and from JSON and @JsonIgnore and
            @JsonProperty -->
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-json-jackson</artifactId>
            <version>${jersey-media-json-jackson.version}</version>
        </dependency>
        <!-- add this to use annotations like uriinfo to work on tomcat -->
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-core</artifactId>
            <version>1.19.2</version>
        </dependency>

        <!-- Simple Logging Facade for Java (SLF4J) serves as a simple facade or abstraction
        for various logging frameworks -->

        <!-- Logging Framework that implements SLF4J natively -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
        </dependency>
        <!-- Logback implements SLF4J directly
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j-version}</version>
        </dependency> -->
        <!-- The mandatory logging dependency in Spring is Jakarta Commons Logging API (JCL) -->
        <!-- But JCL is excluded (see spring excluded 'Commons Logging' above, in favor of SLF4j -->
        <!-- So the both dependencies below are excluded
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>${slf4j-version}</version>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>${slf4j-version}</version>
            <scope>runtime</scope>
        </dependency>
        -->

        <!-- what is this?
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>${log4j}</version>
            <exclusions>
                <exclusion>
                    <groupId>javax.mail</groupId>
                    <artifactId>mail</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>javax.jms</groupId>
                    <artifactId>jms</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.sun.jdmk</groupId>
                    <artifactId>jmxtools</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.sun.jmx</groupId>
                    <artifactId>jmxri</artifactId>
                </exclusion>
            </exclusions>
            <scope>runtime</scope>
        </dependency>
        -->

        <!-- @JsonIdentityInfo(generator=JSOGGenerator.class) -->
        <dependency>
            <groupId>com.voodoodyne.jackson.jsog</groupId>
            <artifactId>jackson-jsog</artifactId>
            <version>1.1</version>
            <scope>compile</scope>
        </dependency>

        <!-- add @Getter @Setter -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
        </dependency>

        <!-- add @Inject, @Scope, @Qualifier -->
        <dependency>
            <groupId>javax.inject</groupId>
            <artifactId>javax.inject</artifactId>
            <version>1</version>
        </dependency>
        <dependency>
            <groupId>org.jetbrains</groupId>
            <artifactId>annotations</artifactId>
            <version>15.0</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.google.guava/guava -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>20.0</version>
        </dependency>
        <!-- added for it tests to have assertThat and is -->
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-all</artifactId>
            <version>1.3</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct-jdk8</artifactId>
            <version>1.0.0.Final</version>
        </dependency>

        <!-- swagger -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>${springfox-swagger.version}</version>
        </dependency>

        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>${springfox-swagger.version}</version>
        </dependency>

        <!-- added due to dutch business days util -->
        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
            <version>2.9.2</version>
        </dependency>
        <dependency>
            <groupId>de.jollyday</groupId>
            <artifactId>jollyday</artifactId>
            <version>0.5.1</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.5</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.gregmarut.commons/encryption -->
        <dependency>
            <groupId>com.gregmarut.commons</groupId>
            <artifactId>encryption</artifactId>
            <version>0.2-RELEASE</version>
        </dependency>
    </dependencies>

    <profiles>
        <!-- The local-tomcat profile is used to run a tomcat from your development machine. It collects all the properties and stores it
         in the default Tomcat directory WEB-INF/classes. Please don't delete this profile as it might break the developer setup. Might be
         removed from parent-pom if alternative solution is implemented. -->
        <!-- from community edition no integration with tomcat is supported, jetty runner is available
        so you have to start tomcat local for this to work -->
        <profile>
            <id>local-tomcat</id>
            <dependencies>
                <dependency>
                    <groupId>javax.servlet</groupId>
                    <artifactId>jstl</artifactId>
                    <version>1.2</version>
                    <scope>compile</scope>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <!-- cargo library can be used to handle app containers -->
                    <plugin>
                        <groupId>org.codehaus.cargo</groupId>
                        <artifactId>cargo-maven2-plugin</artifactId>
                        <version>1.5.0</version>
                        <configuration>
                            <container>
                                <containerId>tomcat7x</containerId>
                                <type>installed</type>
                                <home>Insert absolute path to tomcat 7 installation</home>
                            </container>
                            <configuration>
                                <type>existing</type>
                                <home>Insert absolute path to tomcat 7 installation</home>
                            </configuration>
                        </configuration>
                    </plugin>

                    <plugin>
                        <artifactId>maven-resources-plugin</artifactId>
                        <version>2.7</version>
                        <executions>
                            <execution>
                                <id>copy-jndi-config</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <resources>
                                        <resource>
                                            <directory>
                                                ${basedir}/src/it/resources
                                            </directory>
                                            <filtering>true</filtering>
                                            <includes>
                                                <include>**/*.properties</include>
                                            </includes>
                                        </resource>
                                    </resources>
                                    <overwrite>true</overwrite>
                                    <outputDirectory>
                                        ${basedir}/target/${project.artifactId}Web/WEB-INF/classes
                                    </outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- The run-tomcat profile is used by the local cucumber/intresting test. -->
        <profile>
            <id>run-tomcat</id>
            <dependencies>

                <dependency>
                    <groupId>javax.servlet</groupId>
                    <artifactId>jstl</artifactId>
                    <version>1.2</version>
                    <scope>compile</scope>
                </dependency>

            </dependencies>

            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-resources-plugin</artifactId>
                        <version>2.7</version>
                        <executions>
                            <execution>
                                <id>copy-jndi-config</id>
                                <phase>integration-test</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <resources>
                                        <resource>
                                            <directory>
                                                ${basedir}/src/it/resources
                                            </directory>
                                            <filtering>true</filtering>
                                            <includes>
                                                <include>**/*.properties</include>
                                            </includes>
                                        </resource>
                                    </resources>
                                    <overwrite>true</overwrite>
                                    <outputDirectory>
                                        ${basedir}/target/${project.artifactId}Web/WEB-INF/classes
                                    </outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.tomcat.maven</groupId>
                        <artifactId>tomcat7-maven-plugin</artifactId>
                        <version>2.2</version>
                        <executions>
                            <execution>
                                <id>start-tomcat</id>
                                <phase>integration-test</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <port>${tomcat.port}</port>
                            <path>${tomcat.path}</path>
                            <fork>true</fork>
                            <systemProperties>
                                <APP_NAME>${project.artifactId}</APP_NAME>
                                <PROPERTIES_DIR>
                                    ${basedir}/target/${project.artifactId}/WEB-INF/classes/
                                </PROPERTIES_DIR>
                            </systemProperties>
                            <useSeparateTomcatClassLoader>true</useSeparateTomcatClassLoader>
                            <warSourceDirectory>ROOT.war</warSourceDirectory>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- the api-test profile runs the actual cucumber tests -->
        <profile>
            <id>api-test</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <version>2.19.1</version>
                        <executions>
                            <execution>
                                <id>api-test</id>
                                <goals>
                                    <goal>test</goal>
                                </goals>
                                <phase>integration-test</phase>
                                <configuration>
                                    <includes>
                                        <include>**/*RunCukesTest.java</include>
                                    </includes>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

    </profiles>

</project>
