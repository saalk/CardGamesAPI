<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>nl.knikit.cardgames</groupId>
    <artifactId>card-games-webapp</artifactId>
    <packaging>war</packaging>
    <version>0.0.1-SNAPSHOT</version>
    <name>CardGames Webapp</name>

    <!-- no spring boot
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.4.0.RELEASE</version>
    </parent>
    -->

    <properties>
        <vendor.loc>src/main/webapp/vendor</vendor.loc>
        <endorsed.dir>${project.build.directory}/endorsed</endorsed.dir>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.plugin>3.5.1</maven.compiler.plugin>
        <maven.war.plugin>3.0.0</maven.war.plugin>
        <maven.dependency.plugin>2.10</maven.dependency.plugin>
        <exec.maven.plugin>1.3.2</exec.maven.plugin>
        <!-- 1.3.2 since 1.5.0 is not working-->
        <maven.clean.plugin>3.0.0</maven.clean.plugin>

        <spring-boot.version>1.4.0.RELEASE</spring-boot.version>
        <springframework.version>4.3.1.RELEASE</springframework.version>
        <jackson.version>2.7.5</jackson.version>
        <spring-hateoas.version>0.20.0.RELEASE</spring-hateoas.version>

        <hibernate.version>4.3.6.Final</hibernate.version>
        <mysql.connector.version>5.1.31</mysql.connector.version>

        <junit.version>4.11</junit.version>
        <mockito.version>1.9.5</mockito.version>
        <jasmine.maven.plugin>2.1</jasmine.maven.plugin>

        <java.version>1.8</java.version>
        <lombok.version>1.16.10</lombok.version>
    </properties>

    <dependencies>

        <dependency>
            <groupId>net.sourceforge.plantuml</groupId>
            <artifactId>plantuml</artifactId>
            <version>8047</version>
        </dependency>

        <!-- no spring boot
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
            <scope>provided</scope>
        </dependency>
        -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${springframework.version}</version>
        </dependency>

        <!-- needed when other dependencies need a different version of spring-web
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>${springframework.version}</version>
        </dependency>
        -->

        <dependency> <!-- implementation of Spring MVC, includes spring-web -->
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${springframework.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${springframework.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
            <version>${springframework.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
            <version>${springframework.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId>
            <version>${springframework.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${springframework.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-orm</artifactId>
            <version>${springframework.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-oxm</artifactId>
            <version>${springframework.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.hateoas</groupId>
            <artifactId>spring-hateoas</artifactId>
            <version>${spring-hateoas.version}</version>
        </dependency>

        <dependency> <!-- important -->
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.0.1</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.2.2</version>
        </dependency>

        <dependency> <!-- Hibernate -->
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-entitymanager</artifactId>
            <version>${hibernate.version}</version>
        </dependency>

        <!-- database -->
        <dependency>
            <groupId>org.mariadb.jdbc</groupId>
            <artifactId>mariadb-java-client</artifactId>
            <version>1.4.6</version>
        </dependency>

        <dependency>
            <!-- MySQL -->
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>${mysql.connector.version}</version>
        </dependency>

        <dependency>
            <!-- JUnit is a regression testing framework written by Erich Gamma and Kent Beck. -->
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!-- Mock objects library for java. -->
            <groupId>org.mockito</groupId>
            <artifactId>mockito-all</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- not compatible with spring boot and tomcat 8
        <dependency>
                Java(TM) EE 7 Specification APIs
                <groupId>javax</groupId>
                <artifactId>javaee-api</artifactId>
                <version>7.0</version>
                <scope>provided</scope>
        </dependency>
        -->
        <dependency> <!-- important -->
            <!-- Support for using JAXB annotations as an alternative to "native" Jackson annotations, for configuring data binding. -->
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson.version}</version>
        </dependency>

        <dependency>
            <!-- Jersey JSON Jackson (2.x) entity providers support module.  -->
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-json-jackson</artifactId>
            <version>2.23</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <!-- Simple Logging Facade for Java (SLF4J) serves as a simple facade or abstraction for various logging frameworks -->
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.2</version>
            <type>jar</type>
        </dependency>

        <dependency>
            <!-- Logging Framework -->
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>1.2.17</version>
        </dependency>

        <dependency>
            <!-- Logging Framework that implements SLF4J natively -->
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.1.7</version>
        </dependency>

        <!--Util -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <scope>provided</scope>
        </dependency>

    </dependencies>

    <build>

        <finalName>${project.artifactId}##${project.version}</finalName>

        <resources>
            <resource>
                <directory>src/main/webapp/javascript</directory>
                <filtering>true</filtering>
            </resource>
            <resource>
                <directory>src/main/resources/external</directory>
                <includes>
                    <include>*.txt</include>
                </includes>
            </resource>
        </resources>

        <plugins>

            <!-- now you can use the mvn tomcat7:run goal and browse to  http://localhost:8080/ -->
            <plugin>
                <groupId>org.apache.tomcat.maven</groupId>
                <artifactId>tomcat7-maven-plugin</artifactId>
                <version>2.2</version>
                <configuration>
                    <port>8080</port>
                    <path>/</path>
                </configuration>
            </plugin>
            <!-- Maven plugin to compile sources of you project -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven.compiler.plugin}</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <compilerArgument>
                        -XDignore.symbol.file
                    </compilerArgument>
                </configuration>
            </plugin>
            <!-- Maven plugin for collecting classes and resources for a web app and package them into a war -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>${maven.war.plugin}</version>
                <configuration>
                    <warName>ROOT</warName>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
            </plugin>
            <!-- Maven plugin for utilities to work with dependencies like copy, pack, etc -->
            <!-- Java(TM) EE 7 Endorsed APIs are javaee-api, javaee-web and javaee-endorsed-api
                 these are collections of api specs, the endorsed is for GlassFish -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>${maven.dependency.plugin}</version>
                <executions>
                    <execution>
                        <phase>validate</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${endorsed.dir}</outputDirectory>
                            <silent>true</silent>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>javax</groupId>
                                    <artifactId>javaee-endorsed-api</artifactId>
                                    <version>7.0</version>
                                    <type>jar</type>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- Maven plugin for scala, used by gatling -->
            <!-- yuicompressor is to minify + obfuscate + check js and css files -->
            <plugin>
                <groupId>net.alchim31.maven</groupId>
                <artifactId>yuicompressor-maven-plugin</artifactId>
                <version>1.5.1</version>
                <executions>
                    <execution>
                        <id>compress-js</id>
                        <phase>process-resources</phase>
                        <goals>
                            <!--<goal>jslint</goal>-->
                            <goal>compress</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <failOnWarning>true</failOnWarning>
                    <!--<outputDirectory>src/main/webapp/js</outputDirectory>-->
                    <outputDirectory>target/${artifact.name}/js</outputDirectory>
                    <nosuffix>true</nosuffix>
                    <excludes>
                        <exclude>**/js/**/*js</exclude>
                        <exclude>vendor/**</exclude>
                        <exclude>**/*min.css</exclude>
                        <exclude>**/*min.js</exclude>
                    </excludes>
                </configuration>
            </plugin>
            <!-- Maven plugin to execute Jasmine Specs (unittest javascript) and Selenuim (integrate browser testing) -->
            <plugin>
                <groupId>com.github.searls</groupId>
                <artifactId>jasmine-maven-plugin</artifactId>
                <version>${jasmine.maven.plugin}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>test</goal>
                            <goal>bdd</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <webDriverClassName>org.openqa.selenium.phantomjs.PhantomJSDriver
                    </webDriverClassName>
                    <preloadSources>
                        <source>${vendor.loc}/jquery/dist/jquery.js</source>
                        <source>${vendor.loc}/angular/angular.min.js</source>
                        <source>${vendor.loc}/angular-route/angular-route.min.js</source>
                        <source>${vendor.loc}/angular-mocks/angular-mocks.js</source>
                    </preloadSources>
                    <jsSrcDir>src/main/webapp/javascript</jsSrcDir>
                    <jsTestSrcDir>src/test/javascript/unit</jsTestSrcDir>
                    <specIncludes>
                        <include>*Spec.js</include>
                    </specIncludes>
                </configuration>
            </plugin>
            <!-- Maven plugin 1.3.2 to execute Java in the same VM as maven-->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>${exec.maven.plugin}</version>
                <executions>
                    <execution>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <executable>bower</executable>
                    <arguments>
                        <argument>install</argument>
                    </arguments>
                    <workingDirectory>${basedir}</workingDirectory>
                </configuration>
            </plugin>
            <!-- Maven plugin 2.5 to remove files generated at build-time in a project's
            directory. -->
            <plugin>
                <artifactId>maven-clean-plugin</artifactId>
                <version>${maven.clean.plugin}</version>
                <configuration>
                    <filesets>
                        <fileset>
                            <directory>src/main/webapp/vendor</directory>
                        </fileset>
                        <fileset>
                            <directory>node_modules</directory>
                        </fileset>
                    </filesets>
                </configuration>
            </plugin>
            <!-- Maven plugin to integrate PlantUML -->
            <plugin>
                <groupId>com.github.jeluard</groupId>
                <artifactId>plantuml-maven-plugin</artifactId>
                <version>1.4</version>
                <configuration>
                    <outputInSourceDirectory>false</outputInSourceDirectory>
                    <outputDirectory>${basedir}/target/site/apidocs</outputDirectory>
                    <sourceFiles>
                        <directory>${basedir}/src/main/java/</directory>
                        <includes>
                            <include>**/*.java</include>
                        </includes>
                    </sourceFiles>
                </configuration>
                <!--
                <dependencies>
                    <dependency>
                        <groupId>net.sourceforge.plantuml</groupId>
                        <artifactId>plantuml</artifactId>
                        <version>8047</version>
                    </dependency>
                </dependencies>
                -->
            </plugin>
        </plugins>
    </build>
</project>
