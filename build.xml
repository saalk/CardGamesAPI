<?xml version="1.0" encoding="UTF-8"?>
<project name="galactic-casino" basedir="." default="info">
    <!-- set in the classpath of the external ant tool also a ref to the libraries -->
    <property name="ant.build.javac.source" value="1.7"/>
    <property name="ant.build.javac.target" value="1.7"/>

    <!-- set global properties for this build -->
    <property name="ant.project.name" value="GalacticCasino"/>
    <property name="main_class_name" value="nl.deknik.cardgames.controller.GalacticCasino"/>
    <property name="sitename" value="nl.deknik.cardgames"/>
    <property name="jarname" value="${ant.project.name}"/>
    <property name="libjarname" value="external-libs.jar"/>

    <!-- set directories -->
    <property name="src" location="src/main/java/"/>
    <property name="test" location="src/test/java/"/>
    <property name="resources" location="src/main/resources"/>
    <property name="distexternal" location="dist/external"/>
    <property name="targetresources" location="target/src/main/resources"/>
    <property name="build" location="target/"/>
    <property name="report" location="target/report/"/>
    <property name="javadoc" location="target/javadoc/"/>
    <property name="dist" location="dist/"/>
    <property name="distprevious" location="dist/previous"/>
    <property name="lib" location="lib/"/>

    <path id="lib.classpath">
        <pathelement path="${lib}"/>
        <fileset dir="./lib" includes="**/*.jar"/>
    </path>

    <path id="project.classpath">
        <pathelement path="${lib}"/>
        <pathelement path="${build}"/>
    </path>

    <target name="info">
        <echo>Apache Ant version is ${ant.version} - You are at ${sitename}</echo>
    </target>

    <target name="01-init">
        <!-- Create the time stamp -->
        <tstamp/>
        <!-- Create directories if needed -->
        <mkdir dir="${build}"/>
        <mkdir dir="${targetresources}"/>
        <mkdir dir="${report}"/>
        <mkdir dir="${javadoc}"/>
        <mkdir dir="${dist}"/>
        <mkdir dir="${distprevious}"/>
    </target>

    <target name="02-compile-lib" depends="01-init" description="jar all libraries ">
        <jar jarfile="${build}/${libjarname}">
            <zipgroupfileset dir="lib/">
                <include name="**/*.jar"/>
            </zipgroupfileset>
        </jar>
    </target>
    <!-- <sleep seconds="3"/> -->

    <target name="03-compile-source" depends="01-init" description="compile the source ">
        <!-- Compile the java code from ${src} into ${build} -->
        <javac debug="true" includes="**" srcdir="${src}" destdir="${build}" encoding="UTF-8"
               includeantruntime="false"
               classpath="${build}/${libjarname}">
        </javac>
        <!-- Copy resources from ${src} into ${target} -->
        <copy todir="${targetresources}">
            <fileset dir="${resources}">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>

    <target name="04-compile-test" depends="03-compile-source" description="compile the tests ">
        <javac debug="true" includes="**" srcdir="${test}" destdir="${build}" encoding="UTF-8"
               includeantruntime="false"
               classpath="${build}/${libjarname}">
        </javac>
    </target>

    <target name="05-test" depends="04-compile-test" description="run the tests ">
        <junit printsummary="yes" haltonfailure="no">
            <formatter type="xml"/>
            <formatter type="plain"/>

            <classpath refid="project.classpath"/>
            <classpath location="${build}"/>

            <!-- Make sure these two libraries are included -->
            <classpath location="lib/junit-4.12.jar"/>
            <classpath location="lib/hamcrest-core-1.3.jar"/>

            <batchtest fork="no" todir="${report}">
                <fileset dir="${build}">
                    <include name="**/*Test.*"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <!-- convert the junit xml reports to a browsable HTML report -->
    <target name="06-report unittest" depends="05-test">
        <junitreport todir="${report}">
            <fileset dir="${report}" includes="TEST-*.xml"/>
            <report todir="${report}"/>
        </junitreport>
    </target>

    <!-- process all java files within the "src/" directory to output "plantuml6.txt" file but displaying only objects matching the .*net.* package name -->
    <target name="07-plantuml">
        <taskdef name="plantuml-dependency"
                 classname="net.sourceforge.plantumldependency.cli.main.ant.PlantUMLDependencyProgramTask"
                 classpath="${lib}/plantuml-dependency-cli-1.4.0-jar-with-dependencies.jar"/>
        <plantuml-dependency output="plantuml6.txt" baseDir="${src}"
                             displayPackageName=".*cardgames.*"/>
    </target>

    <target name="08-javadoc" depends="03-compile-source" description="generate documentation">
        <javadoc packagenames="nl.deknik.cardgames.*" sourcepath="${src}" destdir="${javadoc}"
                 windowtitle="Galactic Casino">
<!--                 stylesheetfile="${style}\javadoc_stylesheet2.css"> -->
            <doctitle><![CDATA[<h1>Galactic Casino</h1>]]></doctitle>
            <bottom><![CDATA[<i>Copyright &#169; 2016 saalk. All Rights Reserved.</i>]]></bottom>
            <tag name="todo" scope="all" description="To do:"/>
        </javadoc>
        <!-- Copy resources from ${src} into ${javadoc} -->
        <copy todir="${javadoc}">
            <fileset dir="${resources}">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>

    <target name="09-dist" depends="03-compile-source" description="generate the distribution">
        <!-- Create the distribution directory -->

        <!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file -->
        <jar jarfile="${distprevious}/${jarname}-${DSTAMP}.jar" basedir="${build}">
            <manifest>
                <attribute name="Main-Class" value="${main_class_name}"/>
                <attribute name="Class-Path" value="${build}\${libjarname}"/>
            </manifest>
            <zipfileset src="${build}\${libjarname}"
                        excludes="META-INF/*.SF"/>
        </jar>
        <copy todir="${distexternal}/">
            <fileset dir="${resources}/external/"/>
        </copy>
        <copy file="${distprevious}/${jarname}-${DSTAMP}.jar" tofile="${dist}/${jarname}-latest.jar"
              overwrite="true"/>
        <copy file="${build}/${libjarname}" tofile="${dist}/${libjarname}" overwrite="true"/>
    </target>

    <target name="10-run" depends="09-dist">
        <!-- old
        <java jar="${jar.path}/${ant.project.name}.jar" fork="true"/>
        you cannot provide a jarname and a classpath
        so add our start class to the already define path
        nb cannot use reference in classname..
        -->
        <java classname="nl.deknik.cardgames.controller.GalacticCasino" fork="no">
            <classpath>
                <path location="${dist}\${jarname}-latest.jar"/>
            </classpath>
        </java>
    </target>


    <target name="00-clean" description="clean up">
        <!-- Delete the ${build} directory-->
        <delete dir="${build}"/>
    </target>
</project>